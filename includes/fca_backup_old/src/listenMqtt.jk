'use strict';

const utils = require('../utils');
const mqtt = require('mqtt');
const WebSocket = require('ws');
const HttpsProxyAgent = require('https-proxy-agent');
const EventEmitter = require('events');
const Duplexify = require('duplexify');
const { Transform } = require('stream');
const log = require('npmlog');
const { join } = require('path');

// Constants
const MQTT_KEEPALIVE = 60;
const MQTT_RECONNECT_PERIOD = 3;
const MQTT_RESTART_INTERVAL = 60 * 60 * 1000; // 60 minutes
const TOPICS = ['/ls_req', '/ls_resp', '/legacy_web', '/webrtc', '/rtc_multi', '/onevc', '/br_sr', '/sr_res', '/t_ms', '/thread_typing', '/orca_typing_notifications', '/notify_disconnect', '/orca_presence', '/inbox', '/mercury', '/messaging_events', '/orca_message_notifications', '/pp', '/webrtc_response'];

// Global state
global.Fca.Data.MsgCount = new Map();
global.Fca.Data.event = new Map();
let WebSocket_Global;
let getSeqID;
let form = {};

function buildProxy() {
  return new Transform({
    objectMode: false,
    transform(chunk, enc, next) {
      if (WebSocket_Global.readyState !== WebSocket_Global.OPEN) return next();
      const data = typeof chunk === 'string' ? Buffer.from(chunk, 'utf8') : chunk;
      WebSocket_Global.send(data);
      next();
    },
    flush(done) {
      WebSocket_Global.close();
      done();
    }
  });
}

function buildStream(options, WebSocket, Proxy) {
  const Stream = Duplexify(undefined, undefined, options);
  Stream.socket = WebSocket;

  WebSocket.onclose = () => {
    Stream.end();
    Stream.destroy();
  };

  WebSocket.onerror = (err) => Stream.destroy(err);

  WebSocket.onmessage = (event) => {
    const data = event.data instanceof ArrayBuffer ? Buffer.from(event.data) : Buffer.from(event.data, 'utf8');
    Stream.push(data);
  };

  WebSocket.onopen = () => {
    Stream.setReadable(Proxy);
    Stream.setWritable(Proxy);
    Stream.emit('connect');
  };

  WebSocket_Global = WebSocket;
  Proxy.on('close', () => WebSocket.close());

  return Stream;
}

function setupAutoRestart(ctx) {
  if (!global.Fca.Data.Setup && global.Fca.Require.FastConfig.RestartMQTT_Minutes !== 0) {
    global.Fca.Data.Setup = true;
    setTimeout(() => {
      log.warn('MQTT', 'Auto restarting MQTT client...');
      ctx.mqttClient.end();
      global.Fca.Data.Setup = false;
      getSeqID();
    }, MQTT_RESTART_INTERVAL);
  }
}

function setupMemoryManager() {
  if (process.env.OnStatus === undefined) {
    const MemoryManager = require('../Extra/Src/Release_Memory');
    
    const settings = {
      warningThreshold: 0.7,
      releaseThreshold: 0.8,
      maxThreshold: 0.9,
      interval: 60 * 1000,
      logLevel: 'warn',
      logFile: join(process.cwd(), 'Horizon_Database', 'memory.log'),
      smartReleaseEnabled: true,
      allowLog: global.Fca.Require.FastConfig.AntiStuckAndMemoryLeak.LogFile.Use || false
    };

    const memoryManager = new MemoryManager(settings);
    memoryManager.autoStart(60 * 60 * 1000);

    if (global.Fca.Require.FastConfig.AntiStuckAndMemoryLeak.AutoRestart.Use) {
      memoryManager.onMaxMemory(() => {
        log.warn('Memory', 'Usage >= 90% - Auto restarting to avoid crash');
        process.exit(1);
      });
    }

    process.env.OnStatus = true;
  }
}
function markDelivery(ctx, api, threadID, messageID) {
  if (threadID && messageID) {
    api.markAsDelivered(threadID, messageID, (err) => {
      if (err) log.error('markAsDelivered', err);
      else if (ctx.globalOptions.autoMarkRead) {
        api.markAsRead(threadID, (err) => {
          if (err) log.error('markAsRead', err);
        });
      }
    });
  }
}

function handleMessageReply(deltaMessageReply, ctx, defaultFuncs, api, globalCallback) {
  const mentions = {};
  const mdata = deltaMessageReply.message?.data?.prng;
  
  if (mdata) {
    const parsedMdata = JSON.parse(mdata);
    parsedMdata.forEach(mention => {
      mentions[mention.i] = deltaMessageReply.message.body.substring(mention.o, mention.o + mention.l);
    });
  }

  const messageReply = {
    type: 'message_reply',
    threadID: (deltaMessageReply.message.messageMetadata.threadKey.threadFbId || deltaMessageReply.message.messageMetadata.threadKey.otherUserFbId).toString(),
    messageID: deltaMessageReply.message.messageMetadata.messageId,
    senderID: deltaMessageReply.message.messageMetadata.actorFbId.toString(),
    attachments: (deltaMessageReply.message.attachments || []).map(att => {
      const mercury = JSON.parse(att.mercuryJSON);
      return utils._formatAttachment({ ...att, ...mercury });
    }),
    body: deltaMessageReply.message.body || '',
    isGroup: !!deltaMessageReply.message.messageMetadata.threadKey.threadFbId,
    mentions,
    timestamp: parseInt(deltaMessageReply.message.messageMetadata.timestamp),
    participantIDs: (deltaMessageReply.message.participants || []).map(id => id.toString())
  };

  if (deltaMessageReply.repliedToMessage) {
    messageReply.messageReply = formatRepliedMessage(deltaMessageReply.repliedToMessage);
  } else if (deltaMessageReply.replyToMessageId) {
    fetchRepliedMessage(deltaMessageReply, ctx, defaultFuncs, messageReply, globalCallback);
    return;
  }

  if (ctx.globalOptions.autoMarkDelivery) {
    markDelivery(ctx, api, messageReply.threadID, messageReply.messageID);
  }

  if (!ctx.globalOptions.selfListen && messageReply.senderID === ctx.userID) return;
  globalCallback(null, messageReply);
}

function formatRepliedMessage(repliedToMessage) {
  const mentions = {};
  const mdata = repliedToMessage.data?.prng;
  
  if (mdata) {
    const parsedMdata = JSON.parse(mdata);
    parsedMdata.forEach(mention => {
      mentions[mention.i] = repliedToMessage.body.substring(mention.o, mention.o + mention.l);
    });
  }

  return {
    threadID: (repliedToMessage.messageMetadata.threadKey.threadFbId || repliedToMessage.messageMetadata.threadKey.otherUserFbId).toString(),
    messageID: repliedToMessage.messageMetadata.messageId,
    senderID: repliedToMessage.messageMetadata.actorFbId.toString(),
    attachments: repliedToMessage.attachments.map(att => {
      const mercury = JSON.parse(att.mercuryJSON);
      return utils._formatAttachment({ ...att, ...mercury });
    }),
    body: repliedToMessage.body || '',
    isGroup: !!repliedToMessage.messageMetadata.threadKey.threadFbId,
    mentions,
    timestamp: parseInt(repliedToMessage.messageMetadata.timestamp),
    participantIDs: (repliedToMessage.participants || []).map(id => id.toString())
  };
}

function fetchRepliedMessage(deltaMessageReply, ctx, defaultFuncs, messageReply, globalCallback) {
  const form = {
    av: ctx.globalOptions.pageID,
    queries: JSON.stringify({
      o0: {
        doc_id: '2848441488556444',
        query_params: {
          thread_and_message_id: {
            thread_id: messageReply.threadID,
            message_id: deltaMessageReply.replyToMessageId.id
          }
        }
      }
    })
  };

  defaultFuncs
    .post('https://www.facebook.com/api/graphqlbatch/', ctx.jar, form)
    .then(utils.parseAndCheckLogin(ctx, defaultFuncs))
    .then((json) => {
      if (json[json.length - 1].error_results > 0) throw json[0].o0.errors;
      if (json[json.length - 1].successful_results === 0) throw new Error('Failed to fetch replied message');

      const fetchData = json[0].o0.data.message;
      const mobj = {};

      if (fetchData.message.ranges) {
        for (const range of fetchData.message.ranges) {
          mobj[range.entity.id] = fetchData.message.text.substr(range.offset, range.length);
        }
      }

      messageReply.messageReply = {
        threadID: messageReply.threadID,
        messageID: fetchData.message_id,
        senderID: fetchData.message_sender.id.toString(),
        attachments: fetchData.message.blob_attachment.map(att => 
          utils._formatAttachment({ blob_attachment: att })
        ),
        body: fetchData.message.text || '',
        isGroup: messageReply.isGroup,
        mentions: mobj,
        timestamp: parseInt(fetchData.timestamp_precise)
      };

      if (ctx.globalOptions.autoMarkDelivery) {
        markDelivery(ctx, api, messageReply.threadID, messageReply.messageID);
      }

      if (!ctx.globalOptions.selfListen && messageReply.senderID === ctx.userID) return;
      globalCallback(null, messageReply);
    })
    .catch(err => log.error('Failed to fetch replied message:', err));
}
function parseDelta(defaultFuncs, api, ctx, globalCallback, { delta }) {
  if (delta.class === 'NewMessage') {
    if (ctx.globalOptions.pageID && ctx.globalOptions.pageID !== delta.queue) return;

    const resolveAttachmentUrl = (i) => {
      if (!delta.attachments || i >= delta.attachments.length) {
        let fmtMsg;
        try {
          fmtMsg = utils.formatDeltaMessage(delta);
        } catch (err) {
          return log.error('Format Delta Message', err);
        }
        
        if (fmtMsg) {
          const { isGroup, threadID, messageID } = fmtMsg;
          global.Fca.Data.event.set("Data", { isGroup, threadID, messageID });

          if (global.Fca.Require.FastConfig.AntiGetInfo.AntiGetThreadInfo) {
            global.Fca.Data.MsgCount.set(threadID, (global.Fca.Data.MsgCount.get(threadID) || 0) + 1);
          }    

          if (ctx.globalOptions.autoMarkDelivery) {
            markDelivery(ctx, api, threadID, messageID);
          }

          if (!ctx.globalOptions.selfListen && fmtMsg.senderID === ctx.userID) return;
          globalCallback(null, fmtMsg);
        }
      } else {
        const attachment = delta.attachments[i];
        if (attachment.mercury.attach_type === 'photo') {
          api.resolvePhotoUrl(attachment.fbid, (err, url) => {
            if (!err) attachment.mercury.metadata.url = url;
            resolveAttachmentUrl(i + 1);
          });
        } else {
          resolveAttachmentUrl(i + 1);
        }
      }
    };

    resolveAttachmentUrl(0);
  } else if (delta.class === 'ClientPayload') {
    const clientPayload = utils.decodeClientPayload(delta.payload);
    if (clientPayload && clientPayload.deltas) {
      for (const payloadDelta of clientPayload.deltas) {
        if (payloadDelta.deltaMessageReaction && ctx.globalOptions.listenEvents) {
          const messageReaction = {
            type: 'message_reaction',
            threadID: (payloadDelta.deltaMessageReaction.threadKey.threadFbId || payloadDelta.deltaMessageReaction.threadKey.otherUserFbId).toString(),
            messageID: payloadDelta.deltaMessageReaction.messageId,
            reaction: payloadDelta.deltaMessageReaction.reaction,
            senderID: payloadDelta.deltaMessageReaction.senderId.toString(),
            userID: payloadDelta.deltaMessageReaction.userId.toString()
          };
          globalCallback(null, messageReaction);
        } else if (payloadDelta.deltaRecallMessageData && ctx.globalOptions.listenEvents) {
          const messageUnsend = {
            type: 'message_unsend',
            threadID: (payloadDelta.deltaRecallMessageData.threadKey.threadFbId || payloadDelta.deltaRecallMessageData.threadKey.otherUserFbId).toString(),
            messageID: payloadDelta.deltaRecallMessageData.messageID,
            senderID: payloadDelta.deltaRecallMessageData.senderID.toString(),
            deletionTimestamp: payloadDelta.deltaRecallMessageData.deletionTimestamp,
            timestamp: payloadDelta.deltaRecallMessageData.timestamp
          };
          globalCallback(null, messageUnsend);
        } else if (payloadDelta.deltaMessageReply) {
          handleMessageReply(payloadDelta.deltaMessageReply, ctx, defaultFuncs, api, globalCallback);
        }
      }
    }
  } else {
    switch (delta.class) {
      case 'AdminTextMessage': {
        switch (delta.type) {
          case 'joinable_group_link_mode_change':
          case 'magic_words':
          case 'pin_messages_v2': 
          case 'change_thread_theme':
          case 'change_thread_icon':
          case 'change_thread_nickname':
          case 'change_thread_admins':
          case 'group_poll':
          case 'messenger_call_log': 
          case 'participant_joined_group_call':
          case 'change_thread_approval_mode':
          case 'thread_image_set':
          case 'group_status_changes': {
            try {
              let fmtMsg = utils.formatDeltaEvent(delta);
            
              if (delta.type === 'joinable_group_link_mode_change') {
                fmtMsg = {
                  type: "event",
                  threadID: delta.threadKey.threadFbId ? delta.threadKey.threadFbId : delta.threadKey.otherUserFbId,
                  logMessageType: "log:link-status",
                  author: delta.author,
                  inviteLink: delta.joinableMode?.link || null,
                  allowedToJoin: delta.joinableMode?.isEnabled || false,
                  timestamp: Date.now()
                };
              }
              globalCallback(null, fmtMsg);
            } catch (err) {
              log.error('AdminMessage', err);
            }
            break;
          }
        }
        break;
      }
      case 'ThreadName':
      case 'ParticipantsAddedToGroupThread':
      case 'ParticipantLeftGroupThread': {
        try {
          const fmtMsg = utils.formatDeltaEvent(delta);
          if (!ctx.globalOptions.selfListen && fmtMsg.author.toString() === ctx.userID) return;
          if (!ctx.loggedIn) return;
          globalCallback(null, fmtMsg);
        } catch (err) {
          log.error('ThreadEvent', err);
        }
        break;
      }
      case 'ReadReceipt': {
        try {
          const fmtMsg = utils.formatDeltaReadReceipt(delta);
          globalCallback(null, fmtMsg);
        } catch (err) {
          log.error('ReadReceipt', err);
        }
        break;
      }
    }
  }
}

function listenMqtt(defaultFuncs, api, ctx, globalCallback) {
  const username = {
    u: ctx.userID,
    s: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
    chat_on: ctx.globalOptions.online,
    fg: false,
    d: utils.getGUID(),
    ct: 'websocket',
    aid: '219994525426954',
    mqtt_sid: '',
    cp: 3,
    ecp: 10,
    st: [],
    pm: [],
    dc: '',
    no_auto_fg: true,
    gas: null,
    pack: []
  };

  let host;
  if (ctx.mqttEndpoint) {
    host = `${ctx.mqttEndpoint}&sid=${username.s}&cid=${username.d}`;
  } else if (ctx.region) {
    host = `wss://edge-chat.facebook.com/chat?region=${ctx.region.toLowerCase()}&sid=${username.s}&cid=${username.d}`;
  } else {
    host = `wss://edge-chat.facebook.com/chat?sid=${username.s}&cid=${username.d}`;
  }

  const options = {
    clientId: 'mqttwsclient',
    protocolId: 'MQIsdp',
    protocolVersion: 3,
    username: JSON.stringify(username),
    clean: true,
    wsOptions: {
      headers: {
        'Cookie': ctx.jar.getCookies('https://www.facebook.com').join('; '),
        'Origin': 'https://www.facebook.com',
        'User-Agent': ctx.globalOptions.userAgent,
        'Referer': 'https://www.facebook.com/',
        'Host': new URL(host).hostname
      },
      origin: 'https://www.facebook.com',
      protocolVersion: 13,
      binaryType: 'arraybuffer'
    },
    keepalive: MQTT_KEEPALIVE,
    reschedulePings: true,
    reconnectPeriod: MQTT_RECONNECT_PERIOD
  };

  if (ctx.globalOptions.proxy) {
    options.wsOptions.agent = new HttpsProxyAgent(ctx.globalOptions.proxy);
  }

  ctx.mqttClient = new mqtt.Client(() => 
    buildStream(options, new WebSocket(host, options.wsOptions), buildProxy()), 
    options
  );
  global.mqttClient = ctx.mqttClient;

  global.mqttClient.on('error', (err) => {
    log.error('MQTT Error:', err);
    global.mqttClient.end();

    if (!ctx.lastSeqId || ctx.globalOptions.autoReconnect) {
      getSeqID();
    } else {
      globalCallback({ type: 'stop_listen', error: 'Connection Error - Auto Restart' });
      process.exit(1);
    }
  });

  global.mqttClient.on('connect', () => {
    setupAutoRestart(ctx);
    setupMemoryManager();

    if (!ctx.lastSeqId) {
      log.error("No sequence ID found - Reconnecting...");
      global.mqttClient.end();
      getSeqID();
      return;
    }
    
    TOPICS.forEach(topic => global.mqttClient.subscribe(topic));

    const queue = {
      sync_api_version: 11,
      max_deltas_able_to_process: 100,
      delta_batch_size: 500,
      encoding: 'JSON',
      entity_fbid: ctx.userID,
      initial_titan_sequence_id: ctx.lastSeqId,
      device_params: null
    };

    global.mqttClient.publish('/messenger_sync_create_queue', 
      JSON.stringify(queue),
      { qos: 1, retain: false }
    );

    const restartTimeout = setTimeout(() => {
      log.warn("MQTT Sync timeout - Reconnecting...");
      global.mqttClient.end();
      getSeqID();
    }, 5000);

    ctx.tmsWait = () => {
      clearTimeout(restartTimeout);
      if (ctx.globalOptions.emitReady) {
        globalCallback({ type: "ready", error: null });
      }
      delete ctx.tmsWait;
    };
  });

  global.mqttClient.on('message', (topic, message) => {
    try {
      const jsonMessage = JSON.parse(message.toString());
      
      switch (topic) {
        case '/t_ms': {
          if (ctx.tmsWait && typeof ctx.tmsWait === "function") ctx.tmsWait();

          if (jsonMessage.firstDeltaSeqId && jsonMessage.syncToken) {
            ctx.lastSeqId = jsonMessage.firstDeltaSeqId;
            ctx.syncToken = jsonMessage.syncToken;
          }

          if (jsonMessage.lastIssuedSeqId) {
            ctx.lastSeqId = parseInt(jsonMessage.lastIssuedSeqId);
          }

          for (const delta of jsonMessage.deltas || []) {
            parseDelta(defaultFuncs, api, ctx, globalCallback, { delta });
          }
          break;
        }
        case '/thread_typing':
        case '/orca_typing_notifications': {
          const typ = {
            type: "typ",
            isTyping: !!jsonMessage.state,
            from: jsonMessage.sender_fbid.toString(),
            threadID: utils.formatID((jsonMessage.thread || jsonMessage.sender_fbid).toString())
          };
          globalCallback(null, typ);
          break;
        }
        case '/orca_presence': {
          if (!ctx.globalOptions.updatePresence) {
            for (const data of jsonMessage.list || []) {
              const presence = {
                type: "presence",
                userID: data.u.toString(),
                timestamp: data.l * 1000,
                statuses: data.p
              };
              globalCallback(null, presence);
            }
          }
          break;
        }
        case '/ls_resp': {
          if (!jsonMessage.request_id || !ctx.callback_Task[jsonMessage.request_id]) {
            break;
          }
          const { callback, type } = ctx.callback_Task[jsonMessage.request_id];
          if (callback && type) {
            try {
              const payload = JSON.parse(jsonMessage.payload);
              const data = {
                type,
                ...(type === 'sendMqttMessage' ? {
                  threadID: payload.step[1][2][2][1][2],
                  messageID: payload.step[1][2][2][1][3],
                } : {
                  data: payload.step[1][2][2][1],
                }),
                payload: payload.step[1][2]
              };
              callback(null, data);
            } catch (err) {
              callback("Failed to handle LS response", null);
            }
          }
          break;
        }
      }
    } catch (err) {
      log.error('Failed to process MQTT message:', err);
    }
  });
}
// Main Export Function
module.exports = function(defaultFuncs, api, ctx) {
  // Initialize getSeqID function
  getSeqID = function() {
    ctx.t_mqttCalled = false;

    form = {
      av: ctx.globalOptions.pageID,
      queries: JSON.stringify({
        o0: {
          doc_id: '3336396659757871',
          query_params: {
            limit: 1,
            before: null,
            tags: ['INBOX'],
            includeDeliveryReceipts: false,
            includeSeqID: true
          }
        }
      })
    };

    defaultFuncs
      .post("https://www.facebook.com/api/graphqlbatch/", ctx.jar, form)
      .then(utils.parseAndCheckLogin(ctx, defaultFuncs))
      .then((resData) => {
        if (utils.getType(resData) !== "Array") {
          if (global.Fca.Require.FastConfig.AutoLogin) {
            global.Fca.Require.logger.Warning(global.Fca.Require.Language.Index.AutoLogin, () => {
              return global.Fca.Action('AutoLogin');
            });
          } else {
            global.Fca.Require.logger.Error(global.Fca.Require.Language.Index.ErrAppState);
          }
          return;
        }

        if (resData[resData.length - 1].error_results > 0) {
          throw resData[0].o0.errors;
        }

        if (resData[resData.length - 1].successful_results === 0) {
          throw new Error("getSeqId: no successful_results");
        }

        const viewer = resData[0].o0.data.viewer;
        if (viewer && viewer.message_threads && viewer.message_threads.sync_sequence_id) {
          ctx.lastSeqId = viewer.message_threads.sync_sequence_id;
          listenMqtt(defaultFuncs, api, ctx, globalCallback);
          log.info("Got sequence ID:", ctx.lastSeqId);
        } else {
          throw new Error("getSeqId: no sync_sequence_id found");
        }
      })
      .catch((err) => {
        log.error("GetSeqID Error:", err);
        if (utils.getType(err) == "Object" && err.error === global.Fca.Require.Language.Index.ErrAppState) {
          ctx.loggedIn = false;
        }
        
        setTimeout(() => {
          getSeqID();
        }, 5000);
        
        return globalCallback(err);
      });
  };

  // Create message emitter
  const msgEmitter = new EventEmitter();

  // Initialize global callback
  let globalCallback = (error, message) => {
    if (error) return msgEmitter.emit('error', error);
    msgEmitter.emit('message', message);
  };

  // Add stop listening method
  msgEmitter.stopListening = () => {
    if (ctx.mqttClient) {
      TOPICS.forEach(topic => ctx.mqttClient.unsubscribe(topic));
      ctx.mqttClient.publish('/browser_close', '{}');
      ctx.mqttClient.end(false, () => {
        ctx.mqttClient = undefined;
      });
    }
    global.Fca.Data.StopListening = true;
  };

  // Initialize listening
  if (!ctx.firstListen) ctx.lastSeqId = null;
  ctx.syncToken = undefined;
  ctx.t_mqttCalled = false;

  if (!ctx.firstListen || !ctx.lastSeqId) {
    getSeqID();
  } else {
    listenMqtt(defaultFuncs, api, ctx, globalCallback);
  }

  ctx.firstListen = false;

  // Add listenMqtt method to api
  api.listenMqtt = function(callback) {
    if (callback) {
      globalCallback = callback;
    }
    return msgEmitter;
  };

  return api;
};

// Add thread info update interval if enabled
if (global.Fca.Require.FastConfig.AntiGetInfo.AntiGetThreadInfo) {
  setInterval(() => {
    try {
      const { updateMessageCount, getData, hasData } = require('../Extra/ExtraGetThread');
      const Data = global.Fca.Data.MsgCount;
      const Arr = Array.from(Data.keys());
      
      for (let threadID of Arr) {
        const Count = parseInt(Data.get(threadID));
        if (hasData(threadID)) {
          let threadData = getData(threadID);
          threadData.messageCount += Count;
          updateMessageCount(threadID, threadData);
          Data.delete(threadID);
        }
      }
    } catch (e) {
      log.error('Thread Info Update Error:', e);
    }
  }, 30 * 1000);
}

// Add process event handlers
process.on('SIGINT', () => {
  logUptime();
  process.exit();
});

process.on('exit', logUptime);

// Utility function to log uptime
function logUptime() {
  try {
    const uptime = process.uptime();
    const filePath = join(__dirname, '../CountTime.json');
    const currentTime = Number(global.Fca.Require.fs.readFileSync(filePath, 'utf8')) || 0;
    global.Fca.Require.fs.writeFileSync(filePath, String(uptime + currentTime), 'utf8');
  } catch (err) {
    log.error('Failed to log uptime:', err);
  }
}